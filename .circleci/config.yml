version: 2.1

aliases:
  - &defaults
    docker:
      - image: cimg/node:12.20.1-browsers
        auth:
          username: $DOCKERHUB_USERNAME
          password: $DOCKERHUB_PASSWORD
    working_directory: ~/repo
  - &save_git_cache
    save_cache:
      paths:
        - .git
      key: v1-git-{{ .Revision }}
  - &restore_git_cache
    restore_cache:
      keys:
        - v1-git-{{ .Revision }}
        - v1-git-
  - &save_npm_cache
    save_cache:
      paths:
        - node_modules
      key: v1-npm-{{ checksum "package-lock.json" }}
  - &restore_npm_cache
    restore_cache:
      keys:
        - v1-npm-{{ checksum "package-lock.json" }}
  - &save_build_cache
    save_cache:
      paths:
        - ./build
        - ./intl
      key: v1-build-{{ .Revision }}
  - &restore_build_cache
    restore_cache:
      keys:
        - v1-build-{{ .Revision }}
        - v1-build-
  - &build
    <<: *defaults
    resource_class: medium+
    steps:
      - *restore_git_cache
      - checkout
      - run:
          name: "setup"
          command: |
            npm --production=false ci
            mkdir ./test/results
      - run:
          name: "run lint tests"
          command: |
            npm run test:lint:ci
      - run:
          name: "run npm build"
          command: |
            WWW_VERSION=${CIRCLE_SHA1:0:5} npm run build
      - run:
          name: "Run unit tests"
          command: |
            npm run test:unit:jest
            npm run test:unit:tap:ci
            npm run test:unit:convertReportToXunit
      - *save_npm_cache
      - *save_git_cache
      - *save_build_cache
      - store_test_results:
          path: test/results
      - store_artifacts:
          path: test/results
  - &deploy
    <<: *defaults
    steps:
      - *restore_git_cache
      - checkout
      - *restore_npm_cache
      - *restore_build_cache
      - run:
          name: "setup python"
          command: |
            curl https://bootstrap.pypa.io/2.7/get-pip.py -o get-pip.py
            python3 get-pip.py pip==21.0.1
            pip install s3cmd==2.1.0
      - run:
          name: "deploy to staging"
          command: |
            npm run deploy
  - &integration_jest
    <<: *defaults
    steps:
      - *restore_git_cache
      - checkout
      - *restore_npm_cache
      - run:
          name: "integration tests with Jest"
          command: |
            npm run test:integration:jest:remote
      - store_test_results:
          path: test/results
      - store_artifacts:
          path: test/results
  - &integration_tap
    <<: *defaults
    steps:
      - *restore_git_cache
      - checkout
      - *restore_npm_cache
      - run:
          name: "integration tests with Tap"
          command: |
            mkdir ./test/results
            npm run test:smoke:sauce
            npm run test:smoke:convertReportToXunit
      - store_test_results:
          path: test/results
      - store_artifacts:
          path: test/results


jobs:
  build-staging:
    <<: *build
  build-production:
    # <<: *build
  deploy-staging:
    <<: *deploy
  deploy-production:
    # <<: *deploy
  integration-staging-jest:
    <<: *integration_jest
  integration-staging-tap:
    <<: *integration_tap
  integration-production-jest:
    # <<: *integration_jest
  integration-production-tap:
    # <<: *integration_tap

workflows:
  build-test-deploy-all-staging-1:
    jobs:
      - build-staging:
          context:
            - scratch-www-all
            - scratch-www-staging
          filters:
            branches:
              only:
                - develop
                - /^hotfix\/.*/
                - /^release\/.*/
                - circleCI-configure-tests
      - deploy-staging:
          context:
            - scratch-www-all
            - scratch-www-staging
          requires:
            - build-staging
          filters:
            branches:
              only:
                - develop
                - /^hotfix\/.*/
                - /^release\/.*/
                - circleCI-configure-tests
      - integration-staging-jest:
          context:
            - scratch-www-all
            - scratch-www-staging
          requires:
            - deploy-staging
          filters:
            branches:
              only:
                - develop
                - /^hotfix\/.*/
                - /^release\/.*/
                - circleCI-configure-tests
      - integration-staging-tap:
          context:
            - scratch-www-all
            - scratch-www-staging
          requires:
            - deploy-staging
          filters:
            branches:
              only:
                - develop
                - /^hotfix\/.*/
                - /^release\/.*/
                - circleCI-configure-tests
